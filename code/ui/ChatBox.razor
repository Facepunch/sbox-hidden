@using System;
@using Sandbox;
@using Sandbox.UI;
@using Facepunch.Hidden;
@using Sandbox.UI.Construct;
@using System.Collections.Generic;
@using System.Linq;

@namespace Facepunch.Hidden
@attribute [StyleSheet( "/ui/ChatBox.scss" )]
@inherits Panel

@code
{
	private static ChatBox Current { get; set; }

	public TextEntry Input { get; protected set; }
	public Panel Canvas { get; protected set; }

	public ChatBox()
	{
		Current = this;

		Canvas = Add.Panel( "chat_canvas" );
		Canvas.PreferScrollToBottom = true;

		Input = Add.TextEntry( "" );
		Input.AddEventListener( "onsubmit", () => Submit() );
		Input.AddEventListener( "onblur", () => Close() );
		Input.AcceptsFocus = true;
		Input.AllowEmojiReplace = true;
	}

	public override void Tick()
	{
		base.Tick();

		if ( Sandbox.Input.Pressed( InputButton.Chat ) )
		{
			Open();
		}
	}

	public void AddEntry( string name, string message, Color? color = null, Color? messageColor = null )
	{
		var e = Canvas.AddChild<ChatEntry>();

		e.Message.Text = message;
		e.NameLabel.Text = name;

		e.SetClass( "noname", string.IsNullOrEmpty( name ) );

		if ( color.HasValue )
		{
			e.NameLabel.Style.FontColor = color;
		}

		if ( string.IsNullOrEmpty( name ) )
		{
			e.Message.Style.FontColor = color;
		}

		if ( messageColor.HasValue )
		{
			e.Message.Style.FontColor = messageColor;
		}

		Canvas.TryScrollToBottom();
	}

	private bool CanTalkInChat()
	{
		if ( !Game.LocalPawn.IsValid() || Game.LocalPawn.LifeState == LifeState.Dead )
			return false;

		return true;
	}

	private void Open()
	{
		if ( !CanTalkInChat() )
			return;

		AddClass( "open" );
		Input.Focus();
		Canvas.TryScrollToBottom();
	}

	private void Close()
	{
		RemoveClass( "open" );
		Input.Blur();
	}

	private void Submit()
	{
		Close();

		var msg = Input.Text.Trim();
		Input.Text = "";

		if ( !CanTalkInChat() )
			return;

		if ( string.IsNullOrWhiteSpace( msg ) )
			return;

		Say( msg );
	}
}
