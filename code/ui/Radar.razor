@using System;
@using Sandbox;
@using Sandbox.UI;
@using Facepunch.Hidden;
@using System.Collections.Generic;
@using System.Linq;

@namespace Facepunch.Hidden
@attribute [StyleSheet( "/ui/Radar.scss" )]
@inherits Panel

@if ( Game.LocalPawn is not HiddenPlayer localPlayer ) return;

<root class="radar">
    <div class="background"></div>
    <div class="anchor"></div>
</root>

@code
{
    private readonly Dictionary<HiddenPlayer, RadarDot> RadarDots = new();

    public override void Tick()
    {
        base.Tick();

        if ( Game.LocalPawn is not HiddenPlayer player ) return;

        var isHidden = (player.LifeState != LifeState.Alive || player.Team is not IrisTeam);
        SetClass( "hidden", isHidden );

        if ( isHidden ) return;

        var deleteList = new List<HiddenPlayer>();
        var count = 0;

        deleteList.AddRange( RadarDots.Keys );

        var players = Entity.All.OfType<HiddenPlayer>().OrderBy( x => Vector3.DistanceBetween( x.EyePosition, Camera.Position ) );

        foreach ( var v in players )
        {
            if ( UpdateRadar( v ) )
            {
                deleteList.Remove( v );
                count++;
            }
        }

        foreach ( var p in deleteList )
        {
            RadarDots[p].Delete();
            RadarDots.Remove( p );
        }
    }

    public RadarDot CreateRadarDot( HiddenPlayer player )
    {
        var tag = new RadarDot()
		{
			Parent = this
		};

        return tag;
    }

    public bool UpdateRadar( HiddenPlayer player )
    {
        if ( player.IsLocalPawn || !player.HasTeam || player.Team.HideNameplate )
            return false;

        if ( player.LifeState != LifeState.Alive )
            return false;

        if ( Game.LocalPawn is not HiddenPlayer localPlayer )
            return false;

        var radarRange = 2048f;

        if ( player.Position.Distance( localPlayer.Position ) > radarRange )
            return false;

        if ( !RadarDots.TryGetValue( player, out var tag ) )
        {
            tag = CreateRadarDot( player );
            RadarDots[player] = tag;
        }

        // This is probably fucking awful maths but it works.
        var difference = player.Position - localPlayer.Position;
        var radarSize = 256f;

        var x = (radarSize / radarRange) * difference.x * 0.5f;
        var y = (radarSize / radarRange) * difference.y * 0.5f;

        var angle = (MathF.PI / 180) * (Camera.Rotation.Yaw() - 90f);
        var x2 = x * MathF.Cos( angle ) + y * MathF.Sin( angle );
        var y2 = y * MathF.Cos( angle ) - x *MathF.Sin( angle );

        tag.Style.Left = (radarSize / 2f) + x2;
        tag.Style.Top = (radarSize / 2f) - y2;
        tag.Style.Dirty();

        return true;
    }

    protected override int BuildHash()
    {
        return HashCode.Combine( Game.LocalPawn, (Game.LocalPawn as HiddenPlayer)?.Team ?? default );
    }
}
