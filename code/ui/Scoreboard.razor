@using System;
@using Sandbox;
@using Sandbox.UI;
@using Facepunch.Hidden;
@using System.Collections.Generic;
@using System.Linq;

@namespace Facepunch.Hidden
@attribute [StyleSheet( "/ui/Scoreboard.scss" )]
@inherits Panel

<root class="scoreboard">
	<div class="container">
		<div class="scoreboard-header">
	<label>SCOREBOARD</label>
		</div>

		<div class="team-container">
			<div class="team-header team_hidden">
				<div class="teamicon team_hidden"></div>
				<label>Hidden</label>
			</div>

			<div class="table-header team_hidden">
				<label class="name">NAME</label>
				<label class="kills">KILLS</label>
				<label class="deaths">DEATHS</label>
				<label class="ping">PING</label>
			</div>

			<div class="canvas team_hidden" @ref="HiddenSection">

			</div>
		</div>

		<div class="team-container">
			<div class="team-header team_iris">
				<div class="teamicon team_iris"></div>
				<label>Hidden</label>
			</div>

			<div class="table-header team_iris">
				<label class="name">NAME</label>
				<label class="kills">KILLS</label>
				<label class="deaths">DEATHS</label>
				<label class="ping">PING</label>
			</div>

			<div class="canvas team_iris" @ref="IrisSection">

			</div>
		</div>
	</div>
</root>

@code
{
    Dictionary<IClient, ScoreboardEntry> Entries = new();
		
	public Panel HiddenSection { get; set; }
	public Panel IrisSection { get; set; }

	public static Scoreboard Current { get; private set; }

	public Scoreboard()
	{
		Current = this;
	}

	public bool IsOpen => Input.Down( InputButton.Score );

	public override void Tick()
	{
		base.Tick();

		SetClass( "open", IsOpen );

		if ( !IsVisible )
			return;

        foreach ( IClient cl in Game.Clients.Except( Entries.Keys ) )
		{
			ScoreboardEntry entry = new();
			Entries.Add(cl, entry);
			entry.UpdateFrom(cl);

		}

        foreach ( IClient cl in Entries.Keys.Except( Game.Clients ) )
		{
			if( Entries.TryGetValue( cl, out var entry ) )
			{
				entry.Delete();
				Entries.Remove( cl );
			}
		}

		var incorrectlyLocated = Entries.Where( kvp => kvp.Value.Parent != GetCorrectSection( kvp.Key ) ).ToList();

		foreach( var kvp in incorrectlyLocated )
			kvp.Value.Parent = GetCorrectSection( kvp.Key );
	}

	private Panel GetCorrectSection( IClient client )
	{
		return client.GetInt( "Team", 2 ) == 1 ? HiddenSection : IrisSection;
	}
}
